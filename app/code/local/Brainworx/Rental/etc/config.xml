<?xml version="1.0"?>
<config>
    <modules>
        <Brainworx_Rental>
            <version>0.1.2</version>    <!-- Version number of your module -->
        </Brainworx_Rental>
    </modules>
	<admin>
		<routers>
		<!--configure our module to use the admin frontend-->
		  <adminhtml>
			<args>
			  <modules>
				<Brainworx_Rental after="Mage_Adminhtml">Brainworx_Rental</Brainworx_Rental>	
				<!-- Adminhtml folder in controller to override mage controller, loaded before to override -->
				<Brainworx_Rental2 before="Mage_Adminhtml">Brainworx_Rental_Adminhtml</Brainworx_Rental2>			
			  </modules>
			</args>
		  </adminhtml>		
		</routers>
	 </admin>
	  <frontend>
        <routers>
            <frontrental><!-- unique router identification -->
                <use>standard</use><!-- can be standard or admin -->
                <args>
                    <module>Brainworx_Rental</module>
                    <frontName>rental</frontName><!-- router name to be used in url -->
                </args>
            </frontrental>
        </routers>   
    </frontend>
	<global>
	<!-- rewrite action address -
	<rewrite>
            <module_sales_invoice>
                <from><![CDATA[#^/.*/sales_invoice/email/#]]></from>
               <to>/brainworx_rental/invoicecoail/</to>
            </module_sales_invoice>
        </rewrite> -->
       
		<models>
				<!--
                Unique identifier in the model's node.
                By convention, we put the module's name in lowercase.
            	-->
				<rental>
					<!--
	                    The path to our models directory, with directory
	                    separators replaced by underscores
	                -->
					<class>Brainworx_Rental_Model</class>
					<resourceModel>rental_resource</resourceModel>
				</rental>
				<rental_resource>
					<class>Brainworx_Rental_Model_Resource</class>
					<entities>
						<rentedItem>
							<table>rental_renteditem</table>
						</rentedItem>
					</entities>
				</rental_resource>
				 <sales>
				 	<!-- Override Sales_Oder_Pdf_Invoice  to have custom pdf -->
			        <rewrite>			        
			            <order_pdf_invoice>Brainworx_Rental_Model_Pdf_Invoice</order_pdf_invoice>
			        </rewrite>
			        <!-- Overriding Sales_Order_Invoice model for sendEmail with force -->
			        <rewrite>
			    		<order_invoice>Brainworx_Rental_Model_Order_Invoice</order_invoice>
			    	</rewrite>
			    </sales>
		</models>
		
		<!-- update totals section on pdf -->
		 <pdf>
            <totals>
                <grand_total>
                    <model>rental/pdf_total</model>
                </grand_total>
            </totals>
        </pdf>
       
		<resources>
            <rental_setup>
                <setup>
                    <module>Brainworx_Rental</module>
                    <class>Brainworx_Rental_Model_Resource_Setup</class>
                </setup>
            </rental_setup>
		</resources>
		<blocks>
			<rental>
				<class>Brainworx_Rental_Block</class>
			</rental>
		</blocks>
		<helpers>
			<rental>
				<class>Brainworx_Rental_Helper</class>
			</rental>
		</helpers>
		 <!-- Defining an event observer -->
        <events>            
            <sales_quote_product_add_after>
            <!-- we use this event and not checkout_cat_product_add_after as the latter one is not triggered for adding linked articles with a product -->
             <!-- Defining an observer for this event -->
                <observers>
                    <!--
                        Unique identifier within the
                        sales_quote_product_add_after node.
                        By convention, we write the module's
                        name in lowercase.
                    -->
                    <rental>
                        <!-- The model to be instantiated: 
                        maps to 
                        Model class as found in config <model> brainworx/rental/model
                        brainworx/rental/model/observer.php 
                        brainworx_rental/observer - geeft include(Mage/Brainworx/Rental/Model/Observer.php):
                        rental/observer - geeft correct mapping
                        -->
                        <class>rental/observer</class> 
                        <!-- The method of the class to be called -->
                        <method>addDiscountToRental</method>
                        <!-- The type of class to instantiate -->
                        <type>singleton</type>
                    </rental>
                </observers>
            </sales_quote_product_add_after>
            <!-- event after sale -->
            <sales_order_place_after>
                <!--sales_order_save_commit_after 
                / sales_order_save_after (triggered after every order save- status change etc
                / sales_order_place_after: triggered 1 time when order has been placed-->
                <!-- Defining an observer for this event -->
                <observers>
                    <!--
                        Unique identifier within the
                        sales_order_place_after node.
                        By convention, we write the module's
                        name in lowercase.
                    -->
                    <rental>
                        <!-- The model to be instantiated: 
                        maps to 
                        Model class as found in config <model> brainworx/rental/model
                        brainworx/rental/model/observer.php 
                        brainworx_rental/observer - geeft include(Mage/Brainworx/Rental/Model/Observer.php):
                        rental/observer - geeft correct mapping
                        -->
                        <class>rental/observer</class> 
                        <!-- The method of the class to be called -->
                        <method>checkNewRental</method>
                        <!-- The type of class to instantiate -->
                        <type>singleton</type>
                    </rental>
                </observers>
            </sales_order_place_after>
        </events>
        <!--convert your custom product attribute "supplierinvoice", "rentalitem" from quote item to order item-->
		<fieldsets>
		    <sales_convert_quote_item>
		        <supplierinvoice>
		            <to_order_item>*</to_order_item>
		        </supplierinvoice>
		         <rentalitem>
		            <to_order_item>*</to_order_item>
		        </rentalitem>
		        <supplierneworderemail>
		             <to_order_item>*</to_order_item>
		        </supplierneworderemail>
		    </sales_convert_quote_item>
		    <sales_convert_order_item>
		        <supplierinvoice>
		            <to_quote_item>*</to_quote_item>
		        </supplierinvoice>
		        <rentalitem>
		            <to_quote_item>*</to_quote_item>
		        </rentalitem>
		         <supplierneworderemail>
		             <to_order_item>*</to_order_item>
		        </supplierneworderemail>
		    </sales_convert_order_item>
		</fieldsets>
		<!-- for sending transactional email -->
		 <template>
            <email>
                <!-- Give the template a uniqiue name, you'll need to refer to this later when sending the email-->
                <supplier_order_new>
                    <label>Zorgpunt bestelling</label>
                    <file>supplier_order_new.html</file>
                    <type>html</type>
                </supplier_order_new>
                <supplier_new_pickup>
                    <label>Zorgpunt ophaling</label>
                    <file>supplier_new_pickup.html</file>
                    <type>html</type>
                </supplier_new_pickup>
                <problem_zorgpunt>
                    <label>Zorgpunt problem</label>
                    <file>problem_zorgpunt.html</file>
                    <type>html</type>
                </problem_zorgpunt>
            </email>
        </template>
	</global>
	
	 <adminhtml>
        <layout>
          <updates>
            <rental>
              <file>rental.xml</file>
            </rental>
          </updates>
        </layout>
        <translate>
	        <modules>
	            <rental>
	                <files>
	                    <default>Brainworx_Rental.csv</default>
	                </files>
	            </rental>
	       </modules>
		</translate>
		<events>
			 <!-- event triggered before load of a module admin page, we will use it to add/remove buttons-->
             <adminhtml_widget_container_html_before>
	            <observers>
	                <rental>
	                    <class>rental/observer</class>	                    
	                    <method>adminhtmlWidgetContainerHtmlBefore</method>
	                    <type>singleton</type>
	                </rental>
	            </observers>
	        </adminhtml_widget_container_html_before>
	        
           
		</events>
     </adminhtml>
</config>